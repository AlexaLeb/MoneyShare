from __future__ import annotations
from typing import Protocol, Optional, Iterable, List
from models.users import User
from models.chats import Chat
from models.transactions import Transaction
from models.transaction_participants import TransactionParticipant
from models.debts import Debt


class RepositoryError(RuntimeError):
    """Общий тип ошибки репозитория (для единообразной обработки на верхних слоях)."""
    pass


# Протоколы (интерфейсы). Удобны для тестов и типизации.
class UsersRepo(Protocol):
    def create(self, *, id: int, username: Optional[str], first_name: Optional[str]) -> User: ...
    def get(self, id: int) -> Optional[User]: ...
    def list(self, *, limit: int = 100, offset: int = 0) -> List[User]: ...
    def update(self, *, id: int, username: Optional[str] = None, first_name: Optional[str] = None) -> Optional[User]: ...
    def delete(self, *, id: int) -> bool: ...


class ChatsRepo(Protocol):
    def create(self, *, id: int, title: Optional[str]) -> Chat: ...
    def get(self, id: int) -> Optional[Chat]: ...
    def list(self, *, limit: int = 100, offset: int = 0) -> List[Chat]: ...
    def update(self, *, id: int, title: Optional[str] = None) -> Optional[Chat]: ...
    def delete(self, *, id: int) -> bool: ...


class TransactionsRepo(Protocol):
    def create(self, *, chat_id: int, creator_id: int, amount: float, title: Optional[str]) -> Transaction: ...
    def get(self, id: int) -> Optional[Transaction]: ...
    def list_by_chat(self, *, chat_id: int, limit: int = 100, offset: int = 0) -> List[Transaction]: ...
    def delete(self, *, id: int) -> bool: ...


class TransactionParticipantsRepo(Protocol):
    def create(self, *, transaction_id: int, user_id: int, share_amount: float, tag: str) -> TransactionParticipant: ...
    def get(self, id: int) -> Optional[TransactionParticipant]: ...
    def list_by_transaction(self, *, transaction_id: int) -> List[TransactionParticipant]: ...
    def delete(self, *, id: int) -> bool: ...
    def delete_by_transaction(self, *, transaction_id: int) -> int: ...


class DebtsRepo(Protocol):
    def create(self, *, chat_id: int, user_id: int, amount: float) -> Debt: ...
    def get(self, id: int) -> Optional[Debt]: ...
    def get_by_chat_user(self, *, chat_id: int, user_id: int) -> Optional[Debt]: ...
    def list_by_chat(self, *, chat_id: int, limit: int = 100, offset: int = 0) -> List[Debt]: ...
    def update(self, *, id: int, amount: float) -> Optional[Debt]: ...
    def upsert_delta(self, *, chat_id: int, user_id: int, delta: float) -> Debt: ...
    def delete(self, *, id: int) -> bool: ...
